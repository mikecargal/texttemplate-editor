                             The TextTemplate Language

{#overview}

Subtemplates:
{#overview:[`
{.} Introduction

{#intro}

   {
      \'{"first":"Hello", "second":"World"}\':
      [Interpolation example: {first} {second}!!]
   }

{#goals}

Notice that if you expand the folded lines in the TextTemplate Editor in the left pane, `
you'll see text that is similar to this output.  That is because `
this documentation is actually a "live" rendering of the texttemplate language input `
in the editor.  If you change the text in the editor, `
the documentation will change.  The editor can be a playground for `
trying out examples of the language and developing templates.  Look through the
TextTemplate source for the following paragraphs in the editor to see the language `
in action

While the TextTemplate language is similar to other string interpolation notations, it `
has a number of unique features including:

   {.} Automatic composition of multi-valued data into {
   // this is the data
   \'{"pets":[ 
      {"type":"cat"}
      ,{"type":"dog"}
      ,{"type":"tiger"}
   ]}':
   // this is the template
   [\"anded\" phrases (e.g., \"{pets:[{type}s].Join(', ',' and ')}\") or bulleted `
    lists
    {pets:[
       {.} {type}s]}].@BulletStyle('-')} 

   {.} Control over the detection of {\'{"test":"value"}\':
    [{test->[available]} values and replacement of `
    {unavailable}].@MissingValue('missing')} values

   {.} A rich set of methods that can perform string`
      {'replacing'.Replace('ing','ement')}, `
      {' trimming '.Trim()}, extract {' substringy'.Substr(1,9)}s, do `
      {'padding'.Align(9,'C','-')}, `
       change the {'case'.ToUpper()} of data, `
      {'true'.Matches('yes','1',/True/i)=>[test],[fail]} data for  `
      multiple criteria including matching regular expressions, `
      count and compare {\'{"element1":"multiple","element2":"values"}\':
         [{element1.LessThan([{element2}])->[{element1} {element2}]}]} and `
         "@" (annotation) methods that can control template behavior

   {.} Modularity through the use of {#subexample}
      
   {.} Data manipulation methods that allow data to be selected, ordered and `
      grouped like the following example that selects and `
      groups the birthdays of a few individuals `
      from 1500 records of external data based on birth day and astrological sign:
         {#externalData.Where(dob.ToDate('DD')='27' & lname.Substr(0,1) = 'D')
            .GroupBy(sign, 'group'):[{sign} 
           {group.OrderBy(lname):[{fname} {lname} ({dob})]}]
               .@DateFormat('M/D/YYYY')
               .@DateTest(/^d/i)}

   {.} Date recognition and formatting methods that can use a single `
     date, e.g., `
       {#externalData.Where(dob.Substr(0,7) = '1967-10'):[\"{dob}\", to `
       show that {fname} {lname} was born in `
       the month of {dob.ToDate('MMMM')} in `
        {dob.ToDate('YYYY')} on {dob.ToDate('dddd')} the `
        {dob.ToDate('do')}]}

   {.} Data encoding that can be used to insure that data being templated `
       for output as html, xml or uri's can be properly escaped, e.g., `
       \"{'{\"data\":\"Joan\\'s <data>\"}':[{data}].@EncodeDataFor('html')
          .EncodeFor('html')}\"

   {.} The ability to check for "falsiness", where, for example, the string "0" `
       can be interpreted as false to show that`
       {#externalData.Where(dob.Substr(5,5) = '01-25'): 
       [{#deadoralive.@Falsy(/^0$/)}].Join(', ',' and ')}

   {.} and, finally, as can be seen from this document, automatically `
      bulleted and numbered outlining

{.} Acknowledgements

This project is based on a number of powerful opens-source technologies, without `
which it would not have been possible.  These include:

     {.} {'Microsoft\\'s Monaco Editor'
          .#Click('github.com/microsoft/monaco-editor')} the powerful `
          open source Visual Studio that supports syntax colorizing, error `
          reporting, folding, and so many more features
     {.} {'ANTLR (ANother Tool for Language Recognition)'
         .#Click('www.antlr.org/','click to go to the ANTLR website')} `
          the open source lexer and parser technology that provides `
          the foundation for processing the TextTemplate language
     {.} {'The \"calc-monaco-editor\" project'
         .#Click('github.com/Strumenta/calc-monaco-editor')} `
          Federico Tomassetti's merging of ANTLR4 with Monaco that `
          is described in this {'article'.#Click(
 tomassetti.me/writing-a-browser-based-editor-using-monaco-and-antlr/'
               ,'Click to go to the article')}
     {.} {'Moment.js'
          .#Click('momentjs.com','Click to go to the website')} an open-source `
          library for date formatting
     
{.} Documentation

The TextTemplate language is documented using `
     a "live" template-based web page  `
     {'here'.#Click('/load/docs','Click to see the documentation using TextTemplate')}`
     or if you prefer, you can view an HTML version rendered on the server `
     {'here'.#Click('/runonserver/docs','Click to see the documentation rendered on the server')}.  Note  `
     that any of the demo templates can be rendered on the server using the path `
     '/runonserver/{'['}template name{']'}' as in `
     {'/runonserver/events'.#Click('/runonserver/events','Click to see the events template')}.

{#examples}

{#notes}


].@BulletStyle('I.','(a)','â€¢','1.').@BulletMode('explicit')}
{#intro:[Welcome to the TextTemplate documentation and editor.  TextTemplate is a `
declarative domain-specific language `
for specifying string-interpolated templates.  It supports concise expressions `
that can specify formatting, data manipulation, logic and layout in order to `
facilitate the design and maintenance of code that transforms data into text.

TextTemplate templates merge strings (templates) with data, typically JSON, to compose `
interpolated and formatted output strings.  For `
example, with data such as {\'{"first":"Hello", "second":"World!!}\'} and a `
template like {'[Interpolation example: {first} {second}!!]'}, the language will `
produce:]}
{#goals:[The goals of the project (not necessarily achieved with version 1) are to create a language  `
that is:

	{.} Concise, through the use of language constructs and default processing that `
		eliminate unnecessary verbiage
	{.} Readable, through the use of familiar syntax, properly-named methods, and `
		flexible comments and whitespace
	{.} Intuitive, through a highly generalized implementation such that once the `
		basic concepts of the language ` 
		are grasped for simple operations, performing more advanced operations `
		should not require unique or specialized knowledge
	{.} Consistent, through an implementation that avoids, wherever possible, special `
		cases and restrictions
	{.} Rich, through the anticipation and implementation of a wide range of methods and `
		operators that perform typical as well as `
	    extraordinary manipulations
	{.} Documented, through content that includes adequate examples to demonstrate the concepts
	{.} Universal, through multiple implementations in a variety of computer languages, `
	    starting with JavaScript/Typescript, followed by Java, C# and others]}
{#subexample:[subtemplates that can replace repeated expressions, `
      be shared, be used as functions, replace conditional expressions as `
      well as method arguments]}
{#deadoralive:[{fname} {lname} is {isAlive=>[alive],[dead]}]}
{#Click:[<a title='{$2=>[{$2}],[Click to see the Github project]}' `
   style="font-style:italic;text-decoration: underline;cursor: pointer" `
   href=\"{!$1.StartsWith('/')->[https:{'//'}]}{$1}\">{$0}</a>]}
{#examples:[`
{.} Examples

The following examples illustrate various aspects of the TextTemplate language:

   {.} {'A simple template'.#Click('/load/simple','Simple template')}
   {.} {'A demonstration of outlining'.#Click('/load/outline','Outline template')}
   {.} {'A demonstration of bullets'.#Click('/load/bullets','Bullets template')}
   {.} {'Use of Assert() for validating template output'.#Click('/load/tests','Tests template')}
   {.} {'Some interesting ways of using TextTemplate with the web'.#Click('/load/web','Web template')}
   {.} {'Date manipulation for a \"To Do\" list'.#Click('/load/events','Events template')}
   {.} {'A demonstration of grouping and order'.#Click('/load/birthdays','Birthdays template')}
]}
{#notes:[Note: This software is copyrighted and `
{'licensed'.#Click(
'https://github.com/eisnerw/texttemplate-editor/blob/texttemplate-editor/LICENSE.txt', 
'Click to see the license')} under the MIT license.  The `
software is beta and therefore subject to change.  In `
its current state, it is primarily useful for refining the language, `
building a reference implementation, and receiving feedback.  As `
noted above, implementations in other languages are anticipated.  The `
author welcomes comments, criticisms and suggestions.  ]}
{#externalData:[{'/data/famousBirthdays'}]}
